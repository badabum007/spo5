#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define PLATFORM_WIN 1 
#define PLATFORM_UNIX 2 

#if defined(_WIN32) || defined(_WIN64) 
	#include <windows.h>
	#include <process.h>
	#define PLATFORM PLATFORM_WIN 
#else 
	#include <pthread.h>
	#include <unistd.h>
	#include <termios.h>
	#include <aio.h>
	#include <sys/wait.h>
	#include <sys/types.h>
	#include <dlfcn.h>
	#define PLATFORM PLATFORM_UNIX
	struct aiocb aiocb_;
#endif
	#define maxFileSize 500
	#define nameStringSize 80 
	char buf[maxFileSize];

struct Data 
{
	#if PLATFORM == PLATFORM_WIN
	CRITICAL_SECTION readerSection, writerSection;
	HANDLE readerId;
	OVERLAPPED overRead, overWrite;
	TCHAR readerEventName[nameStringSize], writerEventName[nameStringSize];
	#else
	pthread_t reader, writer;
	pthread_mutex_t mutexRead, mutexWrite;
	void* handle;
	#endif
	int readerStatus;
	int argc;
	char** argv;
	char libName[nameStringSize];
};

void createReader(struct Data*);
//void dynLabOpen(struct Data*);
//void dynLabClose(struct Data*);
void callWriteFiles(struct Data*);

void createSignalObject(struct Data*);
void closeSignalObject(struct Data*);

#if PLATFORM == PLATFORM_WIN
HANDLE createEvent(TCHAR* overlappedEventName);
unsigned  __stdcall readFiles(PVOID data_temp);
#endif
